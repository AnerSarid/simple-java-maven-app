name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy Infrastructure (yes/no)'
        required: true
        default: 'no'

  
jobs:
  build-and-deploy:
    if: ${{ github.event.inputs.destroy != 'yes' }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.67.0
      id: tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: patch
        WITH_V: true
        INITIAL_VERSION: 1.0.0

    - name: Build with Maven
      run: mvn clean package

    - name: Build Docker Image
      run: docker build -t anersarid/simplejava:${{ steps.tag.outputs.new_tag }} .

    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Push Docker Image to Docker Hub
      run: docker push anersarid/simplejava:${{ steps.tag.outputs.new_tag }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Initialize Terraform
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Apply Terraform Configuration
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Set up Docker Context
      run: |
        ec2_ip=$(terraform output -raw ec2_instance_ip)
        echo "Fetched EC2 IP: $ec2_ip"
        echo "${{ secrets.DOCKER_CA_CERT }}" | base64 -d > ca.pem
        echo "${{ secrets.DOCKER_TLS_CERT }}" | base64 -d > cert.pem
        echo "${{ secrets.DOCKER_TLS_KEY }}" | base64 -d > key.pem
        docker context create remote --docker "host=tcp://$ec2_ip:2376,ca=ca.pem,cert=cert.pem,key=key.pem"
        docker context use remote


    - name: Deploy Docker Image
      run: |
        docker pull anersarid/simplejava:${{ steps.tag.outputs.new_tag }}
        docker run -d -p 80:8080 anersarid/simplejava:${{ steps.tag.outputs.new_tag }}
        
  destroy-infrastructure:
    if: ${{ github.event.inputs.destroy == 'yes' }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Destroy Infrastructure
      run: terraform destroy -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

