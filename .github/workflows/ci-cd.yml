name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy Infrastructure (yes/no)'
        required: true
        default: 'no'

  
jobs:
  build-and-deploy:
    if: ${{ github.event.inputs.destroy != 'yes' }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Define an environment variable to hold the EC2 IP
      EC2_IP: ''


    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.67.0
      id: tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: patch
        WITH_V: true
        INITIAL_VERSION: 1.0.0

    - name: Build with Maven
      run: mvn clean package

    - name: Build Docker Image
      run: docker build -t anersarid/simplejava:${{ steps.tag.outputs.new_tag }} .

    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Push Docker Image to Docker Hub
      run: docker push anersarid/simplejava:${{ steps.tag.outputs.new_tag }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Initialize Terraform
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Apply Terraform Configuration
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Fetch EC2 IP Address
      run: |
        echo "Fetching EC2 IP Address..."
        output=$(terraform output ec2_instance_ip)
        ec2_ip=$(echo $output | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n 1)
        echo "Fetched EC2 IP: $ec2_ip"
        echo "EC2_IP=$ec2_ip" >> $GITHUB_ENV
        
    - name: Set up Docker Context
      run: |
        echo "Setting up Docker context with IP: $EC2_IP"
        echo "${{ secrets.DOCKER_CA_CERT }}" | base64 -d > ca.crt
        echo "${{ secrets.DOCKER_TLS_CERT }}" | base64 -d > cert.pem
        echo "${{ secrets.DOCKER_TLS_KEY }}" | base64 -d > key.pem
        docker context create remote --docker "host=tcp://$EC2_IP:443,ca=ca.crt,cert=cert.pem,key=key.pem"
        docker context use remote
    - name: Check Docker Service Health
      run: |
        echo "Checking if Docker daemon is ready..."
        max_retries=12
        wait_seconds=10
        attempt=0
        while ! docker info
        do
          attempt=$((attempt + 1))
          if [ "$attempt" -eq "$max_retries" ]; then
            echo "Docker daemon not ready after $max_retries attempts. Exiting."
            exit 1
          fi
          echo "Waiting $wait_seconds seconds before retrying... (Attempt: $attempt)"
          sleep $wait_seconds
        done
        echo "Docker daemon is ready."
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Debugging Docker Context
      run: |
        docker context ls
        docker context inspect remote
        cat ca.crt
        cat cert.pem
        cat key.pem

    - name: Deploy Docker Image
      run: |
        docker pull anersarid/simplejava:${{ steps.tag.outputs.new_tag }}
        docker run -d -p 80:8080 anersarid/simplejava:${{ steps.tag.outputs.new_tag }}
        
        
  destroy-infrastructure:
    if: ${{ github.event.inputs.destroy == 'yes' }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Destroy Infrastructure
      run: terraform destroy -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

